import telebot
import emoji
import logics
from telebot import types

bot = telebot.TeleBot('6451674061:AAEo0cmwRdSiV0wp2DF0v4ZzSYTI2_L0xQc')
database = ''
theme = ''
input_list = []

@bot.message_handler(commands = ['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rules = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏' + emoji.emojize('üìú'))
    start = types.KeyboardButton('–ü–æ—á–∞—Ç–∏' + emoji.emojize('‚öî'))
    markup.add(rules, start)
    
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –∑ —è–∫–∏–º —Ç–∏ –º–æ–∂–µ—à—å –≥—Ä–∞—Ç–∏ –≤ —Å–ª–æ–≤–∞!\n–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏: –ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å –Ω–∞–∑–∏–≤–∞—î —Å–ª–æ–≤–æ, –∞ –¥—Ä—É–≥–∏–π –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à–µ, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ç—ñ—î—ó –±—É–∫–≤–∏, –Ω–∞ —è–∫—É –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–µ.', reply_markup = markup)

@bot.message_handler(func = lambda message: message.text == '–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏' + emoji.emojize('üìú'))
def rules_game(message):
    bot.send_message(message.chat.id, '–ü–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å –Ω–∞–∑–∏–≤–∞—î —Å–ª–æ–≤–æ, –∞ –¥—Ä—É–≥–∏–π –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à–µ, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ç—ñ—î—ó –±—É–∫–≤–∏, –Ω–∞ —è–∫—É –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–µ.')


@bot.message_handler(func = lambda message: message.text == '–ü–æ—á–∞—Ç–∏' + emoji.emojize('‚öî'))
def Choice_theme_game(message):

    global database
    database = ''

    keyboard_choice = types.ReplyKeyboardMarkup(resize_keyboard=True)

    rules = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏' + emoji.emojize('üìú'))
    theme_country = types.KeyboardButton('–ö—Ä–∞—ó–Ω–∏' + emoji.emojize('üåè'))
    theme_city = types.KeyboardButton('–ú—ñ—Å—Ç–∞' + emoji.emojize('üèò'))
    theme_animals = types.KeyboardButton('–¢–≤–∞—Ä–∏–Ω–∏' + emoji.emojize('ü¶•'))
    theme_plants = types.KeyboardButton('–†–æ—Å–ª–∏–Ω–∏' + emoji.emojize('üçÄ'))
    theme_food = types.KeyboardButton('–°—Ç—Ä–∞–≤–∏' + emoji.emojize('üçî'))

    keyboard_choice.add(rules).row(theme_country, theme_city, theme_animals, theme_plants, theme_food)

    bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ —Ç–µ–º—É', reply_markup = keyboard_choice)

def themes_button(message):
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rules = types.KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏' + emoji.emojize('üìú'))
    main_menu = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' + emoji.emojize('üîç'))
    menu.add(rules, main_menu)
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —Å–ª–æ–≤–æ' + emoji.emojize('üìù'), reply_markup = menu)

@bot.message_handler(func = lambda message: message.text == '–ö—Ä–∞—ó–Ω–∏' + emoji.emojize('üåè'))
def open_country(message):
    themes_button(message)
    global database
    global theme

    theme = 'Country'
    database = 'Data\Country.txt'

@bot.message_handler(func = lambda message: message.text == '–ú—ñ—Å—Ç–∞' + emoji.emojize('üèò'))
def open_city(message):
    themes_button(message)
    global database
    global theme

    theme = 'City'
    database = 'Data\City.txt'

@bot.message_handler(func = lambda message: message.text == '–¢–≤–∞—Ä–∏–Ω–∏' + emoji.emojize('ü¶•'))
def open_animals(message):
    themes_button(message)
    global database
    global theme

    theme = 'Animals'
    database = 'Data\Animals.txt'

@bot.message_handler(func = lambda message: message.text == '–†–æ—Å–ª–∏–Ω–∏' + emoji.emojize('üçÄ'))
def open_plants(message):
    themes_button(message)
    global database
    global theme

    theme = 'Plants'
    database = 'Data\Plants.txt'

@bot.message_handler(func = lambda message: message.text == '–°—Ç—Ä–∞–≤–∏' + emoji.emojize('üçî'))
def open_food(message):
    themes_button(message)
    global database
    global theme

    theme = 'Food'
    database = 'Data\Food.txt'

@bot.message_handler(func = lambda message: message.text == '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' + emoji.emojize('üîç'))
def start_main_menu(message):
    Choice_theme_game(message)


@bot.message_handler(commands = ['notfound'])
def yes_or_not(message):
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Yes = types.KeyboardButton(emoji.emojize('‚úÖ'))
    Not = types.KeyboardButton(emoji.emojize('‚ùå'))
    menu.add(Yes, Not)
    bot.send_message(message.chat.id, '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥—ñ—é',reply_markup = menu)

@bot.message_handler(func = lambda message: message.text == emoji.emojize('‚úÖ'))
def recording(message):
    global input_list
    global database
    last_el = input_list[-1]
    logics.Search(last_el, database, theme).Recording(last_el, database)
    bot.send_message(message.chat.id, '–°–ª–æ–≤–æ –¥–æ–¥–∞–Ω–µ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö' + emoji.emojize('üìù'))
    themes_button(message)

@bot.message_handler(func = lambda message: message.text == emoji.emojize('‚ùå'))
def not_recording(message):
    themes_button(message)


@bot.message_handler(func = lambda message: True)
def get_user_word(message):
    
    global database
    global input_list
    global theme

    input_word = message.text.strip()
    
    if database == '':
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥—ñ–π')
    else:
        result = logics.Search(input_word, database, theme).Search()
        bot.send_message(message.chat.id, result)
        input_list.append(input_word)

bot.polling(none_stop = True)